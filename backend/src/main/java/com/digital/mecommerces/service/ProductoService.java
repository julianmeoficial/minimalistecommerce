package com.digital.mecommerces.service;

import com.digital.mecommerces.exception.ResourceNotFoundException;
import com.digital.mecommerces.model.Producto;
import com.digital.mecommerces.repository.ProductoRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Servicio para gesti√≥n de productos - M√âTODOS ADICIONALES
 * Estos m√©todos se agregan al ProductoService existente
 */
@Service
@Slf4j
public class ProductoService {

    private final ProductoRepository productoRepository;

    public ProductoService(ProductoRepository productoRepository) {
        this.productoRepository = productoRepository;
    }

    // === M√âTODOS PARA VENDEDORES ESPEC√çFICOS ===

    public long contarProductosPorVendedor(Long vendedorId) {
        log.info("üìä Contando productos del vendedor ID: {}", vendedorId);
        return productoRepository.findByVendedorUsuarioIdAndActivoTrue(vendedorId).size();
    }

    public long contarProductosActivosPorVendedor(Long vendedorId) {
        log.info("üìä Contando productos activos del vendedor ID: {}", vendedorId);
        return productoRepository.findByVendedorUsuarioIdAndActivoTrue(vendedorId).size();
    }

    public long contarProductosAgotadosPorVendedor(Long vendedorId) {
        log.info("üìä Contando productos agotados del vendedor ID: {}", vendedorId);
        return productoRepository.findByVendedorUsuarioIdAndActivoTrue(vendedorId).stream()
                .filter(p -> p.getStock() <= 0)
                .count();
    }

    public long contarProductosConPocoStockPorVendedor(Long vendedorId) {
        log.info("üìä Contando productos con poco stock del vendedor ID: {}", vendedorId);
        return productoRepository.findByVendedorUsuarioIdAndActivoTrue(vendedorId).stream()
                .filter(p -> p.getStock() > 0 && p.getStock() <= 5)
                .count();
    }

    public long obtenerStockTotalPorVendedor(Long vendedorId) {
        log.info("üìä Obteniendo stock total del vendedor ID: {}", vendedorId);
        return productoRepository.findByVendedorUsuarioIdAndActivoTrue(vendedorId).stream()
                .mapToLong(p -> p.getStock() != null ? p.getStock() : 0)
                .sum();
    }

    public double obtenerPrecioPromedioPorVendedor(Long vendedorId) {
        log.info("üìä Obteniendo precio promedio del vendedor ID: {}", vendedorId);
        List<Producto> productos = productoRepository.findByVendedorUsuarioIdAndActivoTrue(vendedorId);
        if (productos.isEmpty()) {
            return 0.0;
        }
        return productos.stream()
                .mapToDouble(p -> p.getPrecio() != null ? p.getPrecio() : 0.0)
                .average()
                .orElse(0.0);
    }

    public double obtenerValorInventarioPorVendedor(Long vendedorId) {
        log.info("üìä Calculando valor de inventario del vendedor ID: {}", vendedorId);
        List<Producto> productos = productoRepository.findByVendedorUsuarioIdAndActivoTrue(vendedorId);

        return productos.stream()
                .mapToDouble(p -> (p.getPrecio() != null ? p.getPrecio() : 0.0) *
                        (p.getStock() != null ? p.getStock() : 0))
                .sum();
    }

    public Map<String, Object> obtenerEstadisticasPorCategoriaVendedor(Long vendedorId) {
        log.info("üìä Obteniendo estad√≠sticas por categor√≠a del vendedor ID: {}", vendedorId);

        // Implementaci√≥n alternativa usando los m√©todos disponibles
        List<Producto> productos = productoRepository.findByVendedorUsuarioIdAndActivoTrue(vendedorId);
        Map<String, Object> estadisticas = new HashMap<>();

        // Agrupar productos por categor√≠a y contar
        Map<String, Long> conteo = productos.stream()
                .collect(java.util.stream.Collectors.groupingBy(
                        p -> p.getCategoria().getNombre(),
                        java.util.stream.Collectors.counting()
                ));

        // Convertir a Map<String, Object>
        conteo.forEach(estadisticas::put);

        return estadisticas;
    }

    // === M√âTODOS PARA ESTAD√çSTICAS GENERALES ===

    public long contarProductos() {
        log.info("üìä Contando todos los productos");
        return productoRepository.count();
    }

    public long contarProductosActivos() {
        log.info("üìä Contando productos activos");
        return productoRepository.findByActivoTrue().size();
    }

    public long contarProductosDestacados() {
        log.info("üìä Contando productos destacados");
        return productoRepository.findByDestacadoTrueAndActivoTrue().size();
    }

    public long contarProductosAgotados() {
        log.info("üìä Contando productos agotados");
        return productoRepository.findByActivoTrue().stream()
                .filter(p -> p.getStock() <= 0)
                .count();
    }

    public long obtenerStockTotal() {
        log.info("üìä Obteniendo stock total del sistema");
        return productoRepository.findByActivoTrue().stream()
                .mapToLong(p -> p.getStock() != null ? p.getStock() : 0)
                .sum();
    }

    public double obtenerPrecioPromedio() {
        log.info("üìä Obteniendo precio promedio del sistema");
        List<Producto> productos = productoRepository.findByActivoTrue();
        if (productos.isEmpty()) {
            return 0.0;
        }
        return productos.stream()
                .mapToDouble(p -> p.getPrecio() != null ? p.getPrecio() : 0.0)
                .average()
                .orElse(0.0);
    }

    public Map<String, Object> obtenerEstadisticasPorCategoria() {
        log.info("üìä Obteniendo estad√≠sticas por categor√≠a");

        // Implementaci√≥n alternativa usando los m√©todos disponibles
        List<Producto> productos = productoRepository.findByActivoTrue();
        Map<String, Object> estadisticas = new HashMap<>();

        // Agrupar productos por categor√≠a y contar
        Map<String, Long> conteo = productos.stream()
                .collect(java.util.stream.Collectors.groupingBy(
                        p -> p.getCategoria().getNombre(),
                        java.util.stream.Collectors.counting()
                ));

        // Convertir a Map<String, Object>
        conteo.forEach(estadisticas::put);

        return estadisticas;
    }

    public Map<String, Object> obtenerEstadisticasPorVendedor() {
        log.info("üìä Obteniendo estad√≠sticas por vendedor");

        // Implementaci√≥n alternativa usando los m√©todos disponibles
        List<Producto> productos = productoRepository.findByActivoTrue();
        Map<String, Object> estadisticas = new HashMap<>();

        // Agrupar productos por vendedor y contar
        Map<String, Long> conteo = productos.stream()
                .collect(java.util.stream.Collectors.groupingBy(
                        p -> p.getVendedor().getUsuarioNombre(),
                        java.util.stream.Collectors.counting()
                ));

        // Convertir a Map<String, Object>
        conteo.forEach(estadisticas::put);

        return estadisticas;
    }

    // === M√âTODOS PARA B√öSQUEDAS Y FILTROS ===

    public Page<Producto> buscarProductos(String query, Pageable pageable) {
        log.info("üîç Buscando productos con t√©rmino: {}", query);

        if (query == null || query.trim().isEmpty()) {
            return obtenerProductosActivos(pageable);
        }

        String searchTerm = "%" + query.trim().toLowerCase() + "%";
        return productoRepository.findByTextoEnNombreODescripcion(query, pageable);
    }

    public Page<Producto> filtrarProductos(Double precioMin, Double precioMax,
                                           Long categoriaId, Boolean disponible, Pageable pageable) {
        log.info("üîç Filtrando productos con criterios m√∫ltiples");

        if (precioMin == null) precioMin = 0.0;
        if (precioMax == null) precioMax = Double.MAX_VALUE;
        if (disponible == null) disponible = true;

        // Usar el m√©todo de filtros avanzados que ya existe en el repositorio
        return productoRepository.findConFiltrosAvanzados(
                categoriaId, 
                null, // vendedor no especificado
                precioMin, 
                precioMax, 
                disponible, 
                pageable);
    }

    // === M√âTODOS PARA GESTI√ìN DE STOCK Y ESTADO ===

    @Transactional
    public void actualizarStock(Long productoId, Integer nuevoStock) {
        log.info("üì¶ Actualizando stock del producto ID: {} a: {}", productoId, nuevoStock);

        Producto producto = obtenerProductoPorId(productoId);
        producto.setStock(nuevoStock);
        producto.setUpdatedat(LocalDateTime.now());

        productoRepository.save(producto);
        log.info("‚úÖ Stock actualizado exitosamente");
    }

    @Transactional
    public void destacarProducto(Long productoId, Boolean destacado) {
        log.info("‚≠ê {} producto ID: {}", destacado ? "Destacando" : "Desmarcando", productoId);

        Producto producto = obtenerProductoPorId(productoId);
        producto.setDestacado(destacado);
        producto.setUpdatedat(LocalDateTime.now());

        productoRepository.save(producto);
        log.info("‚úÖ Estado destacado actualizado");
    }

    // === M√âTODOS PARA VENTAS (SIMULADAS PARA DESARROLLO) ===

    public List<Map<String, Object>> obtenerVentasPorVendedor(Long vendedorId) {
        log.info("üí∞ Obteniendo ventas del vendedor ID: {}", vendedorId);

        // Por ahora retornamos datos simulados hasta que se implemente el m√≥dulo de √≥rdenes
        return List.of(
                Map.of(
                        "fecha", LocalDateTime.now().minusDays(1),
                        "producto", "Producto Demo",
                        "cantidad", 2,
                        "total", 150.00,
                        "estado", "COMPLETADA"
                ),
                Map.of(
                        "fecha", LocalDateTime.now().minusDays(3),
                        "producto", "Otro Producto",
                        "cantidad", 1,
                        "total", 75.00,
                        "estado", "PENDIENTE"
                )
        );
    }

    public long contarVentasPorVendedor(Long vendedorId) {
        log.info("üí∞ Contando ventas del vendedor ID: {}", vendedorId);
        // Implementar cuando se tenga el m√≥dulo de √≥rdenes
        return 0L;
    }

    public double obtenerIngresosTotalesPorVendedor(Long vendedorId) {
        log.info("üí∞ Obteniendo ingresos totales del vendedor ID: {}", vendedorId);
        // Implementar cuando se tenga el m√≥dulo de √≥rdenes
        return 0.0;
    }

    public double obtenerPromedioVentaPorVendedor(Long vendedorId) {
        log.info("üí∞ Obteniendo promedio de venta del vendedor ID: {}", vendedorId);
        // Implementar cuando se tenga el m√≥dulo de √≥rdenes
        return 0.0;
    }

    public long contarVentasHoyPorVendedor(Long vendedorId) {
        log.info("üí∞ Contando ventas de hoy del vendedor ID: {}", vendedorId);
        // Implementar cuando se tenga el m√≥dulo de √≥rdenes
        return 0L;
    }

    public long contarVentasMesPorVendedor(Long vendedorId) {
        log.info("üí∞ Contando ventas del mes del vendedor ID: {}", vendedorId);
        // Implementar cuando se tenga el m√≥dulo de √≥rdenes
        return 0L;
    }

    public Map<String, Object> obtenerProductoMasVendidoPorVendedor(Long vendedorId) {
        log.info("üí∞ Obteniendo producto m√°s vendido del vendedor ID: {}", vendedorId);
        // Implementar cuando se tenga el m√≥dulo de √≥rdenes
        return Map.of("mensaje", "M√≥dulo de ventas en desarrollo");
    }

    public List<Map<String, Object>> obtenerClientesFrecuentesPorVendedor(Long vendedorId) {
        log.info("üí∞ Obteniendo clientes frecuentes del vendedor ID: {}", vendedorId);
        // Implementar cuando se tenga el m√≥dulo de √≥rdenes
        return List.of();
    }

    public List<Map<String, Object>> obtenerTopProductosVendedor(Long vendedorId, int limite) {
        log.info("üìä Obteniendo top {} productos del vendedor ID: {}", limite, vendedorId);

        // Usar el m√©todo existente y luego limitar los resultados
        List<Producto> todosProductos = productoRepository.findByVendedorUsuarioIdAndActivoTrue(vendedorId);

        // Ordenar por fecha de creaci√≥n descendente (m√°s recientes primero)
        List<Producto> productos = todosProductos.stream()
                .sorted((p1, p2) -> p2.getCreatedat().compareTo(p1.getCreatedat()))
                .limit(limite)
                .collect(java.util.stream.Collectors.toList());

        // Crear una lista mutable para evitar problemas de tipo
        List<Map<String, Object>> resultado = new ArrayList<>();

        for (Producto p : productos) {
            Map<String, Object> map = new HashMap<>();
            map.put("id", p.getProductoId());
            map.put("nombre", p.getProductoNombre());
            map.put("precio", p.getPrecio());
            map.put("stock", p.getStock());
            map.put("categoria", p.getCategoria().getNombre());
            resultado.add(map);
        }

        return resultado;
    }

    public long contarVentasPendientesPorVendedor(Long vendedorId) {
        log.info("üí∞ Contando ventas pendientes del vendedor ID: {}", vendedorId);
        // Implementar cuando se tenga el m√≥dulo de √≥rdenes
        return 0L;
    }

    public List<Object[]> obtenerProductosMasVendidos() {
        log.info("üìä Obteniendo productos m√°s vendidos del sistema");
        // Implementar cuando se tenga el m√≥dulo de √≥rdenes
        return List.of();
    }

    // === M√âTODOS ADICIONALES PARA PRODUCTOS ===

    public List<Producto> obtenerProductosRecientes() {
        log.info("üÜï Obteniendo productos recientes");
        return productoRepository.findProductosActivosRecientes();
    }

    public List<Producto> obtenerProductosDestacados() {
        log.info("‚≠ê Obteniendo productos destacados");
        return productoRepository.findByDestacadoTrueAndActivoTrue();
    }

    public Producto obtenerProductoPorSlug(String slug) {
        log.info("üîç Obteniendo producto por slug: {}", slug);
        return productoRepository.findBySlug(slug)
                .orElseThrow(() -> new ResourceNotFoundException("Producto no encontrado con slug: " + slug));
    }

    public Producto obtenerProductoPorId(Long productoId) {
        log.info("üîç Obteniendo producto por ID: {}", productoId);
        return productoRepository.findById(productoId)
                .orElseThrow(() -> new ResourceNotFoundException("Producto no encontrado con ID: " + productoId));
    }

    // Este m√©todo ya existe en el servicio original, solo verificamos que est√©
    public Page<Producto> obtenerProductosActivos(Pageable pageable) {
        log.info("üìã Obteniendo productos activos con paginaci√≥n");
        return productoRepository.findByActivoTrue(pageable);
    }
}
