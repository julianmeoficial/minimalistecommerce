package com.digital.mecommerces.controller;

import com.digital.mecommerces.constants.RoleConstants;
import com.digital.mecommerces.dto.CategoriaProductoDTO;
import com.digital.mecommerces.enums.TipoCategoria;
import com.digital.mecommerces.model.CategoriaProducto;
import com.digital.mecommerces.service.CategoriaProductoService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

/**
 * Controlador para gesti√≥n de categor√≠as de productos
 * Optimizado para el sistema medbcommerce 3.0
 */
@RestController
@RequestMapping("/api/categorias")
@Tag(name = "Categor√≠as", description = "APIs para gesti√≥n de categor√≠as de productos")
@Slf4j
public class CategoriaProductoController {

    private final CategoriaProductoService categoriaProductoService;

    public CategoriaProductoController(CategoriaProductoService categoriaProductoService) {
        this.categoriaProductoService = categoriaProductoService;
    }

    // === ENDPOINTS P√öBLICOS ===

    @GetMapping
    @Operation(summary = "Listar todas las categor√≠as activas", description = "Endpoint p√∫blico para obtener categor√≠as")
    public ResponseEntity<List<CategoriaProductoDTO>> listarCategorias() {
        log.info("üìÇ Obteniendo todas las categor√≠as activas");

        List<CategoriaProducto> categorias = categoriaProductoService.obtenerCategoriasActivas();
        List<CategoriaProductoDTO> categoriasDTO = categorias.stream()
                .map(CategoriaProductoDTO::fromEntity)
                .map(CategoriaProductoDTO::toPublic)
                .toList();

        log.info("‚úÖ {} categor√≠as encontradas", categoriasDTO.size());
        return ResponseEntity.ok(categoriasDTO);
    }

    @GetMapping("/principales")
    @Operation(summary = "Listar categor√≠as principales", description = "Obtiene categor√≠as sin padre (nivel ra√≠z)")
    public ResponseEntity<List<CategoriaProductoDTO>> listarCategoriasPrincipales() {
        log.info("üìÇ Obteniendo categor√≠as principales");

        List<CategoriaProducto> categorias = categoriaProductoService.obtenerCategoriasPrincipales();
        List<CategoriaProductoDTO> categoriasDTO = categorias.stream()
                .map(CategoriaProductoDTO::fromEntity)
                .map(CategoriaProductoDTO::toPublic)
                .toList();

        return ResponseEntity.ok(categoriasDTO);
    }

    @GetMapping("/{id}")
    @Operation(summary = "Obtener categor√≠a por ID")
    public ResponseEntity<CategoriaProductoDTO> obtenerCategoria(@PathVariable Long id) {
        log.info("üìÇ Obteniendo categor√≠a ID: {}", id);

        CategoriaProducto categoria = categoriaProductoService.obtenerCategoriaPorId(id);
        CategoriaProductoDTO categoriaDTO = CategoriaProductoDTO.fromEntity(categoria);

        return ResponseEntity.ok(categoriaDTO.toPublic());
    }

    @GetMapping("/slug/{slug}")
    @Operation(summary = "Obtener categor√≠a por slug")
    public ResponseEntity<CategoriaProductoDTO> obtenerCategoriaPorSlug(@PathVariable String slug) {
        log.info("üìÇ Obteniendo categor√≠a por slug: {}", slug);

        CategoriaProducto categoria = categoriaProductoService.obtenerCategoriaPorSlug(slug);
        CategoriaProductoDTO categoriaDTO = CategoriaProductoDTO.fromEntity(categoria);

        return ResponseEntity.ok(categoriaDTO.toPublic());
    }

    @GetMapping("/{id}/subcategorias")
    @Operation(summary = "Obtener subcategor√≠as de una categor√≠a")
    public ResponseEntity<List<CategoriaProductoDTO>> obtenerSubcategorias(@PathVariable Long id) {
        log.info("üìÇ Obteniendo subcategor√≠as de categor√≠a ID: {}", id);

        List<CategoriaProducto> subcategorias = categoriaProductoService.obtenerSubcategorias(id);
        List<CategoriaProductoDTO> subcategoriasDTO = subcategorias.stream()
                .map(CategoriaProductoDTO::fromEntity)
                .map(CategoriaProductoDTO::toPublic)
                .toList();

        return ResponseEntity.ok(subcategoriasDTO);
    }

    @GetMapping("/jerarquia")
    @Operation(summary = "Obtener estructura jer√°rquica completa")
    public ResponseEntity<List<CategoriaProductoDTO>> obtenerJerarquiaCompleta() {
        log.info("üìÇ Obteniendo jerarqu√≠a completa de categor√≠as");

        List<CategoriaProducto> categorias = categoriaProductoService.obtenerCategoriasPrincipales();
        List<CategoriaProductoDTO> jerarquia = categorias.stream()
                .map(CategoriaProductoDTO::fromEntity)
                .map(CategoriaProductoDTO::toHierarchical)
                .toList();

        return ResponseEntity.ok(jerarquia);
    }

    // === ENDPOINTS PARA CATEGOR√çAS DEL SISTEMA ===

    @GetMapping("/sistema")
    @Operation(summary = "Obtener categor√≠as del sistema optimizado")
    public ResponseEntity<List<CategoriaProductoDTO>> obtenerCategoriasDelSistema() {
        log.info("üìÇ Obteniendo categor√≠as del sistema optimizado");

        List<CategoriaProducto> categorias = categoriaProductoService.obtenerCategoriasDelSistema();
        List<CategoriaProductoDTO> categoriasDTO = categorias.stream()
                .map(CategoriaProductoDTO::fromEntity)
                .map(CategoriaProductoDTO::toPublic)
                .toList();

        return ResponseEntity.ok(categoriasDTO);
    }

    @GetMapping("/sistema/{tipoCategoria}")
    @Operation(summary = "Obtener categor√≠a espec√≠fica del sistema")
    public ResponseEntity<CategoriaProductoDTO> obtenerCategoriaDelSistema(@PathVariable String tipoCategoria) {
        try {
            log.info("üìÇ Obteniendo categor√≠a del sistema: {}", tipoCategoria);

            TipoCategoria tipo = TipoCategoria.valueOf(tipoCategoria.toUpperCase());
            CategoriaProducto categoria = categoriaProductoService.obtenerCategoriaDelSistema(tipo);
            CategoriaProductoDTO categoriaDTO = CategoriaProductoDTO.fromEntity(categoria);

            return ResponseEntity.ok(categoriaDTO.toPublic());
        } catch (IllegalArgumentException e) {
            log.warn("‚ùå Tipo de categor√≠a inv√°lido: {}", tipoCategoria);
            return ResponseEntity.badRequest().build();
        }
    }

    // === ENDPOINTS ADMINISTRATIVOS ===

    @PostMapping
    @Operation(summary = "Crear nueva categor√≠a")
    @PreAuthorize("hasAuthority('" + RoleConstants.PERM_ADMIN_TOTAL + "') or hasAuthority('" + RoleConstants.PERM_GESTIONAR_CATEGORIAS + "')")
    @SecurityRequirement(name = "bearerAuth")
    public ResponseEntity<CategoriaProductoDTO> crearCategoria(@Valid @RequestBody CategoriaProductoDTO categoriaDTO) {
        log.info("üìÇ Creando nueva categor√≠a: {}", categoriaDTO.getNombre());

        CategoriaProducto categoria = new CategoriaProducto();
        categoria.setNombre(categoriaDTO.getNombre());
        categoria.setDescripcion(categoriaDTO.getDescripcion());
        categoria.setSlug(categoriaDTO.getSlug());
        categoria.setImagen(categoriaDTO.getImagen());

        if (categoriaDTO.getCategoriaPadreId() != null) {
            CategoriaProducto padre = categoriaProductoService.obtenerCategoriaPorId(categoriaDTO.getCategoriaPadreId());
            categoria.setCategoriaPadre(padre);
        }

        CategoriaProducto nuevaCategoria = categoriaProductoService.crearCategoria(categoria);
        CategoriaProductoDTO respuesta = CategoriaProductoDTO.fromEntity(nuevaCategoria);

        log.info("‚úÖ Categor√≠a creada con ID: {}", nuevaCategoria.getCategoriaId());
        return new ResponseEntity<>(respuesta, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    @Operation(summary = "Actualizar categor√≠a")
    @PreAuthorize("hasAuthority('" + RoleConstants.PERM_ADMIN_TOTAL + "') or hasAuthority('" + RoleConstants.PERM_GESTIONAR_CATEGORIAS + "')")
    @SecurityRequirement(name = "bearerAuth")
    public ResponseEntity<CategoriaProductoDTO> actualizarCategoria(@PathVariable Long id,
                                                                    @Valid @RequestBody CategoriaProductoDTO categoriaDTO) {
        log.info("üìÇ Actualizando categor√≠a ID: {}", id);

        CategoriaProducto categoriaDetails = new CategoriaProducto();
        categoriaDetails.setNombre(categoriaDTO.getNombre());
        categoriaDetails.setDescripcion(categoriaDTO.getDescripcion());
        categoriaDetails.setSlug(categoriaDTO.getSlug());
        categoriaDetails.setImagen(categoriaDTO.getImagen());
        categoriaDetails.setActivo(categoriaDTO.getActivo());

        CategoriaProducto categoriaActualizada = categoriaProductoService.actualizarCategoria(id, categoriaDetails);
        CategoriaProductoDTO respuesta = CategoriaProductoDTO.fromEntity(categoriaActualizada);

        log.info("‚úÖ Categor√≠a actualizada exitosamente");
        return ResponseEntity.ok(respuesta);
    }

    @DeleteMapping("/{id}")
    @Operation(summary = "Eliminar categor√≠a")
    @PreAuthorize("hasAuthority('" + RoleConstants.PERM_ADMIN_TOTAL + "')")
    @SecurityRequirement(name = "bearerAuth")
    public ResponseEntity<Void> eliminarCategoria(@PathVariable Long id) {
        log.info("üìÇ Eliminando categor√≠a ID: {}", id);

        categoriaProductoService.eliminarCategoria(id);

        log.info("‚úÖ Categor√≠a eliminada exitosamente");
        return ResponseEntity.noContent().build();
    }

    // === ENDPOINTS DE ESTAD√çSTICAS ===

    @GetMapping("/estadisticas")
    @Operation(summary = "Obtener estad√≠sticas de categor√≠as")
    @PreAuthorize("hasAuthority('" + RoleConstants.PERM_ADMIN_TOTAL + "') or hasAuthority('" + RoleConstants.PERM_GESTIONAR_CATEGORIAS + "')")
    @SecurityRequirement(name = "bearerAuth")
    public ResponseEntity<Object> obtenerEstadisticas() {
        log.info("üìÇ Obteniendo estad√≠sticas de categor√≠as");

        var estadisticas = Map.of(
                "total", categoriaProductoService.contarCategorias(),
                "activas", categoriaProductoService.contarCategoriasActivas(),
                "principales", categoriaProductoService.contarCategoriasPrincipales(),
                "conProductos", categoriaProductoService.contarCategoriasConProductos(),
                "delSistema", categoriaProductoService.contarCategoriasDelSistema(),
                "porTipo", categoriaProductoService.obtenerEstadisticasPorTipo()
        );

        return ResponseEntity.ok(estadisticas);
    }

    @GetMapping("/mas-utilizadas")
    @Operation(summary = "Obtener categor√≠as m√°s utilizadas")
    public ResponseEntity<List<Object[]>> obtenerCategoriaMasUtilizadas() {
        log.info("üìÇ Obteniendo categor√≠as m√°s utilizadas");

        List<Object[]> categoriasPopulares = categoriaProductoService.obtenerCategoriasMasUtilizadas();

        return ResponseEntity.ok(categoriasPopulares);
    }
}
